import random

import vk_api
from vk_api.longpoll import VkLongPoll, VkEventType
from vk_api.keyboard import VkKeyboard, VkKeyboardColor

FILE = r'C:\Users\USER\PycharmProjects\Bot\dict1.txt'
class BaseBot:
    def __init__(self, token: str):
        self._vk = vk_api.VkApi(token=token)
        self.__long_poll = VkLongPoll(self._vk)
        self.keyboard = KeyboardMixin()

    def start(self, commands):
        self.__commands = commands
        print('–ò–≥—Ä–æ–≤–æ–π –±–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –Ω–∞–ø–∏—à–∏—Ç–µ "–ù–∞—á–∞—Ç—å".')
        for event in self.__long_poll.listen():
            if event.type == VkEventType.MESSAGE_NEW:
                if event.to_me:
                    self._command_starter(event)

    def _command_starter(self, event):
        msg = event.text
        if self.__commands.get(msg.lower()):
            self.__commands[msg.lower()](event)
        else:
            self.command_name(event)

    def _send_msg(self, id: int, message: str, keyboard: VkKeyboard = None):
        if not keyboard:
            data = {
                'user_id': id,
                'message': message,
                'random_id': random.randint(1, 1000)
            }
            self._vk.method('messages.send', data)
        elif keyboard:
            data = {
                'user_id': id,
                'message': message,
                'random_id': random.randint(1, 1000),
                'keyboard': keyboard.get_keyboard()
            }
            self._vk.method('messages.send', data)

    def command_name(self, event):
        pass
    
class Bot(BaseBot):
    users = {}

    def greeting(self, event):
        user_id = event.user_id
        self._send_msg(user_id,
                       '–ü—Ä–∏–≤–µ—Ç, —Ç—ã –º–æ–∂–µ—à—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –ø—Ä–∞–≤–∏–ª–∞ –∏–ª–∏ –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É. –ù–∞–ø–∏—à–∏: "–ü—Ä–∞–≤–∏–ª–∞" –∏–ª–∏ "–ò–≥—Ä–∞".',
                       keyboard=self.keyboard.get_standart_keyboard())
    

    def rules(self, event):
        user_id = event.user_id
        self._send_msg(user_id,
                       '–ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã —Ç–∞–∫–æ–≤—ã:... –ï—Å–ª–∏ —Ç—ã –≥–æ—Ç–æ–≤ –∏–≥—Ä–∞—Ç—å, –Ω–∞–ø–∏—à–∏: "–ò–≥—Ä–∞".')
        
    def prestart(self, event):
        user_id = event.user_id
        keyboard = VkKeyboard()
        keyboard.add_button(label='2', color=VkKeyboardColor.POSITIVE)
        keyboard.add_line()
        keyboard.add_button(label='3', color=VkKeyboardColor.PRIMARY)
        keyboard.add_line()
        keyboard.add_button(label='4', color=VkKeyboardColor.POSITIVE)
        self._send_msg(user_id,
                       '–°–∫–æ–ª—å–∫–æ –∫–æ–º–∞–Ω–¥ –±—É–¥–µ—Ç –∏–≥—Ä–∞—Ç—å? –ù–∞–ø–∏—à–∏ —Ü–∏—Ñ—Ä—É –æ—Ç 2 –¥–æ 4.', keyboard)

    def command_amount(self, event):
        user_id = event.user_id
        if 1 < int(event.text) < 5:
            self.users[user_id] = {
                'command_amount': int(event.text),
                'command_name': [],
            }
            self._send_msg(user_id,
                          '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã ‚Ññ1: ',)
        else:
            self._send_msg(user_id,
                           '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–∞–Ω–¥ –æ—Ç 2 –¥–æ 4. –ù–∞–ø–∏—à–∏ —Ü–∏—Ñ—Ä—É –æ—Ç 2 –¥–æ 4.')
        
    def command_name(self, event):
        user_id = event.user_id
        if self.users.get(user_id):
            if len(self.users.get(user_id)['command_name']) != self.users.get(user_id)['command_amount']:
                self.users[user_id]['command_name'].append(event.text)
                if len(self.users.get(user_id)['command_name']) + 1 <= self.users.get(user_id)['command_amount']:
                    self._send_msg(user_id,
                                f"–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã ‚Ññ{len(self.users.get(user_id)['command_name']) + 1}: ")
                else:
                    self.victory_score(event)
        else:
            self._send_msg(user_id, '–í–∞—à –æ—Ç–≤–µ—Ç –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω')

    def victory_score(self, event):
        user_id = event.user_id
        self._send_msg(user_id,
                       "–î–æ —Å–∫–æ–ª—å–∫–∏ –æ—á–∫–æ–≤ –∏–≥—Ä–∞–µ–º –¥–ª—è –ø–æ–±–µ–¥—ã? –ù–∞–ø–∏—à–∏: 25, 50 –∏–ª–∏ 100.")

    def set_victory_score(self, event):
        user_id = event.user_id
        if int(event.text) in [25, 50, 100]:
            self.users[user_id]['score'] = int(event.text)
            print(self.users)
            self.penalty(event)
        else:
            self._send_msg(user_id,
                           "–ù–∞–ø–∏—à–∏: 25, 50 –∏–ª–∏ 100.")
            self.set_victory_score(event)

    def penalty(self, event):
        user_id = event.user_id
        self._send_msg(user_id,
                       '–û—Ç–Ω–∏–º–∞—Ç—å –ª–∏ –æ—á–∫–∏ –∑–∞ –ø—Ä–æ–ø—É—Å–∫ —Å–ª–æ–≤–∞? –ù–∞–ø–∏—à–∏: "–¥–∞" –∏–ª–∏ "–Ω–µ—Ç".')

    def set_penalty(self, event):
        user_id = event.user_id
        if event.text.lower() == '–¥–∞':
            self.users[user_id]['penalty'] = True
            self.explain_time(event)
        elif event.text.lower() == '–Ω–µ—Ç':
            self.users[user_id]['penalty'] = False
            self.explain_time(event)
        print(self.users)

    def explain_time(self, event):
        user_id = event.user_id
        self._send_msg(user_id,
                       '–°–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–∞—ë–º –Ω–∞ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ? –ù–∞–ø–∏—à–∏: "60", "90" –∏–ª–∏ "120" —Å–µ–∫—É–Ω–¥.')
    def set_explain_time(self, event):
        user_id = event.user_id
        if event.text.lower() == '60':
            self.users[user_id]['explain_time'] = int(event.text)
            self.choose_dict(event)
        elif event.text.lower() == '90':
            self.users[user_id]['explain_time'] = int(event.text)
            self.choose_dict(event)
        elif event.text.lower() == '120':
            self.users[user_id]['explain_time'] = int(event.text)
            self.choose_dict(event)
        print(self.users)

    def choose_dict(self, event):
        user_id = event.user_id
        self._send_msg(user_id,
                       '–í—ã–±–µ—Ä–∏ —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –∏–≥—Ä—ã. –ù–∞–ø–∏—à–∏: "–ø—Ä–æ—Å—Ç–æ", "—Å—Ä–µ–¥–Ω–µ" –∏–ª–∏ "—Å–ª–æ–∂–Ω–æ".')


    def create_dict(self, event):
        user_id = event.user_id
        if event.text.lower() == '–ø—Ä–æ—Å—Ç–æ':
            self.users = Dictionaries(event, self.users).create_easy_dict()


        elif event.text.lower() == '—Å—Ä–µ–¥–Ω–µ':
            with open(FILE, encoding='utf-8') as f:
                moderate = f.readlines()
                moderate = [line.rstrip('\n') for line in moderate]
                self.users[user_id]['dictionary'] = moderate

        elif event.text.lower() == '—Å–ª–æ–∂–Ω–æ':
            with open(FILE, encoding='utf-8') as f:
                hard = f.readlines()
                hard = [line.rstrip('\n') for line in hard]
                self.users[user_id]['dictionary'] = hard

        print(self.users)



class Dictionaries():
    def __init__(self, event, users):
        self.user_id = event.user_id
        self.users = users
    def create_easy_dict(self):
        with open(FILE, encoding='utf-8') as f:
            easy = f.readlines()
            easy = [line.rstrip('\n') for line in easy]
            self.users[self.user_id]['dictionary'] = easy
            return self.users

class KeyboardMixin(VkKeyboard):
    """
    Working with the VK keyboard, implemented methods for
    getting, hiding the keyboard and showing auxiliary commands
    """

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)

    def hide_keyboard(self, label: str = 'üìåÔ∏è–í–µ—Ä–Ω—É—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É'):
        keyboard = VkKeyboard()
        keyboard.add_button(label=label, color=VkKeyboardColor.POSITIVE)
        return keyboard

    def get_standart_keyboard(self):
        keyboard = VkKeyboard()
        keyboard.add_button(label='–ù–∞—á–∞—Ç—å –∏–≥—Ä—É', color=VkKeyboardColor.POSITIVE)
        keyboard.add_line()
        keyboard.add_button(label='–ü—Ä–∞–≤–∏–ª–∞', color=VkKeyboardColor.PRIMARY)
        return keyboard

    def get_help(self):
        keyboard = VkKeyboard()
        keyboard.add_button(label='üîé–ü–æ–º–æ—â—å', color=VkKeyboardColor.POSITIVE)
        return keyboard
